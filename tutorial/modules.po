# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-21 18:09+0200\n"
"PO-Revision-Date: 2019-05-19 16:00+0200\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: it_IT\n"
"X-Generator: Poedit 2.0.6\n"

#: ../Doc/tutorial/modules.rst:5
msgid "Modules"
msgstr "Moduli"

#: ../Doc/tutorial/modules.rst:7
msgid ""
"If you quit from the Python interpreter and enter it again, the definitions "
"you have made (functions and variables) are lost. Therefore, if you want to "
"write a somewhat longer program, you are better off using a text editor to "
"prepare the input for the interpreter and running it with that file as input "
"instead.  This is known as creating a *script*.  As your program gets "
"longer, you may want to split it into several files for easier maintenance.  "
"You may also want to use a handy function that you've written in several "
"programs without copying its definition into each program."
msgstr ""
"Se esci  e rientri dall'interprete Python, le definizioni fatte (funzioni e "
"variabili) vengono perse. Se, quindi, vuoi scrivere un programma più lungo, "
"dovresti usare un editor di testo e lanciare l'interprete con il file come "
"input. Questo è conosciuto come creare uno *script*. Quando il tuo programma "
"diventa più lungo, potresti avere bisogno di dividerlo in più file per una "
"manutenzione più semplice. Potresti anche voler usare una funzione utile "
"scritta in più programmi senza copiare la sua definizione in ognuno di essi."

#: ../Doc/tutorial/modules.rst:16
msgid ""
"To support this, Python has a way to put definitions in a file and use them "
"in a script or in an interactive instance of the interpreter. Such a file is "
"called a *module*; definitions from a module can be *imported* into other "
"modules or into the *main* module (the collection of variables that you have "
"access to in a script executed at the top level and in calculator mode)."
msgstr ""

#: ../Doc/tutorial/modules.rst:22
msgid ""
"A module is a file containing Python definitions and statements.  The file "
"name is the module name with the suffix :file:`.py` appended.  Within a "
"module, the module's name (as a string) is available as the value of the "
"global variable ``__name__``.  For instance, use your favorite text editor "
"to create a file called :file:`fibo.py` in the current directory with the "
"following contents::"
msgstr ""
"Un modulo è un file contenente definizioni e statement Python. Il nome del "
"file è il nome del modulo con il suffisso  :file:`.py`.  Dentro ad un "
"modulo, il nome di esso (come stringa) è disponibile come valore della "
"variabile globale ``__name__``. Ad esempio, usa il tuo editor di testo "
"preferito per creare un file :file:`fibo.py` nella cartella corrente con il "
"contenuto seguente::"

#: ../Doc/tutorial/modules.rst:45
msgid ""
"Now enter the Python interpreter and import this module with the following "
"command::"
msgstr ""
"Ora entra nell'interprete Python e importa questo modulo con il seguente "
"comando::"

#: ../Doc/tutorial/modules.rst:50
msgid ""
"This does not enter the names of the functions defined in ``fibo``  directly "
"in the current symbol table; it only enters the module name ``fibo`` there. "
"Using the module name you can access the functions::"
msgstr ""

#: ../Doc/tutorial/modules.rst:61
msgid ""
"If you intend to use a function often you can assign it to a local name::"
msgstr ""
"Se intendi usare spesso una funzione puoi assegnarla ad un nome locale::"

#: ../Doc/tutorial/modules.rst:71
msgid "More on Modules"
msgstr "Altro sui moduli"

#: ../Doc/tutorial/modules.rst:73
msgid ""
"A module can contain executable statements as well as function definitions. "
"These statements are intended to initialize the module. They are executed "
"only the *first* time the module name is encountered in an import statement. "
"[#]_ (They are also run if the file is executed as a script.)"
msgstr ""
"Un modulo può contenere statement eseguibili così come definizioni di "
"funzioni. Questi statement servono per inizializzare il modulo. Vengono "
"eseguiti solo la *prima* volta che il nome del modulo viene incontrato in "
"uno statement di import. [#]_ (Vengono eseguiti anche se il file viene "
"eseguito come script.)"

#: ../Doc/tutorial/modules.rst:78
msgid ""
"Each module has its own private symbol table, which is used as the global "
"symbol table by all functions defined in the module. Thus, the author of a "
"module can use global variables in the module without worrying about "
"accidental clashes with a user's global variables. On the other hand, if you "
"know what you are doing you can touch a module's global variables with the "
"same notation used to refer to its functions, ``modname.itemname``."
msgstr ""
"Ogni modulo possiede la sua tabella dei simboli privata, usata come tabella "
"dei simboli globali da tutte le funzioni definite nel modulo. Per questo "
"motivo quindi, l'autore di un modulo può utilizzare le variabili globali nel "
"modulo senza preoccuparsi dei conflitti accidentali con le variabili globali "
"definite dall'utente. D'altro canto, se sai cosa stai facendo, puoi usare le "
"variabili globali del modulo con la stessa notazinoe usata per riferirsi "
"alle sue funzioni, ``modname.itemname``."

#: ../Doc/tutorial/modules.rst:85
msgid ""
"Modules can import other modules.  It is customary but not required to place "
"all :keyword:`import` statements at the beginning of a module (or script, "
"for that matter).  The imported module names are placed in the importing "
"module's global symbol table."
msgstr ""
"I moduli possono importare altri moduli. è frequente ma non necessario "
"mettere tutti gli statement :keyword:`import` all'inizio del moduli (o "
"script). I nomi dei moduli importati sono situati nella tabella dei simboli "
"globale del modulo importato."

#: ../Doc/tutorial/modules.rst:90
msgid ""
"There is a variant of the :keyword:`import` statement that imports names "
"from a module directly into the importing module's symbol table.  For "
"example::"
msgstr ""
"Esiste una variante dello statement :keyword:`import` che importa nomi da un "
"modulo direttamente nella tabella dei simboli del modulo che importa. Ad "
"esempio::"

#: ../Doc/tutorial/modules.rst:97
msgid ""
"This does not introduce the module name from which the imports are taken in "
"the local symbol table (so in the example, ``fibo`` is not defined)."
msgstr ""

#: ../Doc/tutorial/modules.rst:100
msgid "There is even a variant to import all names that a module defines::"
msgstr ""
"Esiste anche un'alternativa all'importazione di tutti i nomi che un modulo "
"definisce::"

#: ../Doc/tutorial/modules.rst:106
msgid ""
"This imports all names except those beginning with an underscore (``_``). In "
"most cases Python programmers do not use this facility since it introduces "
"an unknown set of names into the interpreter, possibly hiding some things "
"you have already defined."
msgstr ""
"Questo importa tutti i nomi eccetto quelli che iniziano con un underscore "
"(``_``). Nella maggior parte dei casi i programmatori Python non usano "
"questa agevolazione, dato che introduce un set sconosciuto di nomi "
"nell'interprete, con la possibilità di nascondere alcune cose che hanno già "
"definito."

#: ../Doc/tutorial/modules.rst:111
msgid ""
"Note that in general the practice of importing ``*`` from a module or "
"package is frowned upon, since it often causes poorly readable code. "
"However, it is okay to use it to save typing in interactive sessions."
msgstr ""
"Da notare che in generale la pratica di importare ``*`` da un modulo o un "
"package è scoraggiato, dato che crea spesso codice poco leggibile. Comunque, "
"è ammesso il suo utilizzo per risparmiare digitazioni nelle sessioni "
"interattive."

#: ../Doc/tutorial/modules.rst:115
msgid ""
"If the module name is followed by :keyword:`!as`, then the name following :"
"keyword:`!as` is bound directly to the imported module."
msgstr ""
"Se il nome del modulo è seguito da :keyword:`!as`, allora il nome che segue :"
"keyword:`!as` è legato direttamente al modulo importato."

#: ../Doc/tutorial/modules.rst:124
msgid ""
"This is effectively importing the module in the same way that ``import "
"fibo`` will do, with the only difference of it being available as ``fib``."
msgstr ""

#: ../Doc/tutorial/modules.rst:127
msgid ""
"It can also be used when utilising :keyword:`from` with similar effects::"
msgstr ""
"Può essere anche usato quando viene usato :keyword:`from` con effetti "
"simili::"

#: ../Doc/tutorial/modules.rst:136
msgid ""
"For efficiency reasons, each module is only imported once per interpreter "
"session.  Therefore, if you change your modules, you must restart the "
"interpreter -- or, if it's just one module you want to test interactively, "
"use :func:`importlib.reload`, e.g. ``import importlib; importlib."
"reload(modulename)``."
msgstr ""
"Per ragioni di efficienza, ogni modulo viene importato solo una volta per "
"sessione dell'interprete. Per questo motivo, se cambi i tuoi moduli, devi "
"riavviare l'interprete -- o, se vuoi testare un solo modulo "
"interattivamente, usa :func:`importlib.reload`, ad esempio ``import "
"importlib; importlib.reload(modulename)``."

#: ../Doc/tutorial/modules.rst:146
msgid "Executing modules as scripts"
msgstr "Eseguire moduli come script"

#: ../Doc/tutorial/modules.rst:148
msgid "When you run a Python module with ::"
msgstr "Quando esegui un modulo Python con ::"

#: ../Doc/tutorial/modules.rst:152
msgid ""
"the code in the module will be executed, just as if you imported it, but "
"with the ``__name__`` set to ``\"__main__\"``.  That means that by adding "
"this code at the end of your module::"
msgstr ""
"il codice nel modulo verrà eseguito, come se lo avessi importato, ma con "
"``__name__`` impostato a ``\"__main__\"``. Questo significa che aggiungendo "
"questo codice alla fine del modulo::"

#: ../Doc/tutorial/modules.rst:160
msgid ""
"you can make the file usable as a script as well as an importable module, "
"because the code that parses the command line only runs if the module is "
"executed as the \"main\" file:"
msgstr ""
"puoi rendere il file utilizzabile come script o come modulo importabile, "
"dato che il codice che effettua il parsing della linea di comando viene "
"eseguito solo se il modulo è eseguito come file \"main\":"

#: ../Doc/tutorial/modules.rst:169
msgid "If the module is imported, the code is not run::"
msgstr "Se il modulo viene importato, il codice non viene eseguito::"

#: ../Doc/tutorial/modules.rst:174
msgid ""
"This is often used either to provide a convenient user interface to a "
"module, or for testing purposes (running the module as a script executes a "
"test suite)."
msgstr ""
"Viene spesso usato sia per fornire una conveniente interfaccia utente al "
"modulo, sia per motivi di test (lanciando il modulo come script, esegue una "
"suite di test)."

#: ../Doc/tutorial/modules.rst:181
msgid "The Module Search Path"
msgstr ""

#: ../Doc/tutorial/modules.rst:185
msgid ""
"When a module named :mod:`spam` is imported, the interpreter first searches "
"for a built-in module with that name. If not found, it then searches for a "
"file named :file:`spam.py` in a list of directories given by the variable :"
"data:`sys.path`.  :data:`sys.path` is initialized from these locations:"
msgstr ""
"Quando un modulo chiamato :mod:`spam` viene importato, l'interprete ricerca "
"per primo un moduli built-in con quel nome. Se non viene trovato, ricerca "
"quindi un file di nome :file:`spam.py` in una lista di cartelle data dalla "
"variabile :data:`sys.path`.  :data:`sys.path` è inizializzata da queste "
"posizioni:"

#: ../Doc/tutorial/modules.rst:190
msgid ""
"The directory containing the input script (or the current directory when no "
"file is specified)."
msgstr ""
"La cartella contenente lo script di input (o quella corrente quando non "
"viene specificato un file)."

#: ../Doc/tutorial/modules.rst:192
msgid ""
":envvar:`PYTHONPATH` (a list of directory names, with the same syntax as the "
"shell variable :envvar:`PATH`)."
msgstr ""
":envvar:`PYTHONPATH` (una lista di nomi di cartelle, con la stessa sintassi "
"della variabile di shell :envvar:`PATH`)."

#: ../Doc/tutorial/modules.rst:194
msgid "The installation-dependent default."
msgstr "Il default dipendente dall'installazione."

#: ../Doc/tutorial/modules.rst:197
msgid ""
"On file systems which support symlinks, the directory containing the input "
"script is calculated after the symlink is followed. In other words the "
"directory containing the symlink is **not** added to the module search path."
msgstr ""
"Sui file system che supportano i link simbolici, la cartella contenente lo "
"script di input è calcolata dopo che il link simbolico viene seguito. In "
"altre parole la cartella contenente il link simbolico **non** viene aggiunto "
"al path di ricerca del modulo."

#: ../Doc/tutorial/modules.rst:201
msgid ""
"After initialization, Python programs can modify :data:`sys.path`.  The "
"directory containing the script being run is placed at the beginning of the "
"search path, ahead of the standard library path. This means that scripts in "
"that directory will be loaded instead of modules of the same name in the "
"library directory. This is an error unless the replacement is intended.  See "
"section :ref:`tut-standardmodules` for more information."
msgstr ""
"Dopo l'inizializzazione, i programmi Python possono modificare :data:`sys."
"path`. La cartella contenente lo script lanciato è posizionata all'inizio "
"del percorso di ricerca, davanti al percorso della libreria standard. Questo "
"significa che gli script nella cartella saranno caricati al posto dei moduli "
"con gli stessi nomi nella cartella della libreria. Questo è un errore a meno "
"che la sostituzione sia voluta. Vedi la sezione :ref:`tut-standardmodules` "
"per maggiori informazioni."

#: ../Doc/tutorial/modules.rst:212
msgid "\"Compiled\" Python files"
msgstr "File Python \"compilati\""

#: ../Doc/tutorial/modules.rst:214
msgid ""
"To speed up loading modules, Python caches the compiled version of each "
"module in the ``__pycache__`` directory under the name :file:`module."
"{version}.pyc`, where the version encodes the format of the compiled file; "
"it generally contains the Python version number.  For example, in CPython "
"release 3.3 the compiled version of spam.py would be cached as ``__pycache__/"
"spam.cpython-33.pyc``.  This naming convention allows compiled modules from "
"different releases and different versions of Python to coexist."
msgstr ""
"Per velocizzare il caricamento dei moduli, Python tiene in cache la versione "
"compilata di ogni modulo nella cartella ``__pycache__`` sotto il nome :file:"
"`module.{version}.pyc`, dove la versione codifica il formato del file "
"compilato; contiene generalmente il numero della versione Python. Ad "
"esempio, nella release 3.3 di CPython la versione compilata di spam.py "
"verrebbe tenuta in cache come ``__pycache__/spam.cpython-33.pyc``. Questa "
"naming convention permette la coesistenza di moduli compilati da release e "
"versioni differenti di Python."

#: ../Doc/tutorial/modules.rst:222
msgid ""
"Python checks the modification date of the source against the compiled "
"version to see if it's out of date and needs to be recompiled.  This is a "
"completely automatic process.  Also, the compiled modules are platform-"
"independent, so the same library can be shared among systems with different "
"architectures."
msgstr ""
"Python confronta la data di modifica del sorgente con quella della versione "
"compilata per verificare se è obsoleta e necessita di una seconda "
"compilazione. Questo è un processo completamente automatico. Inoltre, i "
"moduli compilati sono indipendenti dalla piattaforma, quindi la stessa "
"libreria può essere condivisa tra più sistemi con architetture differenti."

#: ../Doc/tutorial/modules.rst:227
msgid ""
"Python does not check the cache in two circumstances.  First, it always "
"recompiles and does not store the result for the module that's loaded "
"directly from the command line.  Second, it does not check the cache if "
"there is no source module.  To support a non-source (compiled only) "
"distribution, the compiled module must be in the source directory, and there "
"must not be a source module."
msgstr ""
"Python non controlla la cache in due casi. Primo, ricompila sempre e non "
"memorizza il risultato per il modulo caricato direttamente da linea di "
"comando. Secondo, non controlla la cache se non esiste un modulo sorgente. "
"Per il supporto a distribuzioni non sorgente (solo compilate), il modulo "
"compilato deve trovarsi nella cartella sorgente e non deve esserci un modulo "
"sorgente."

#: ../Doc/tutorial/modules.rst:234
msgid "Some tips for experts:"
msgstr "Alcuni consigli per esperti:"

#: ../Doc/tutorial/modules.rst:236
msgid ""
"You can use the :option:`-O` or :option:`-OO` switches on the Python command "
"to reduce the size of a compiled module.  The ``-O`` switch removes assert "
"statements, the ``-OO`` switch removes both assert statements and __doc__ "
"strings.  Since some programs may rely on having these available, you should "
"only use this option if you know what you're doing.  \"Optimized\" modules "
"have an ``opt-`` tag and are usually smaller.  Future releases may change "
"the effects of optimization."
msgstr ""
"Puoi usare le opzioni :option:`-O` o :option:`-OO` sul comando Python per "
"ridurre la dimensione del modulo compilato. Il flag ``-O`` rimuove gli "
"statement di assert, ``-OO`` rimuove sia gli statement di assert, sia le "
"stringhe __doc__. Dato che alcuni programmi possono basarsi sulla loro "
"disponibilità, dovresti usare questa opzione solo se sai quello che stai "
"facendo. I moduli \"ottimizzati\" hanno un tag ``opt-`` e sono solitamente "
"più piccoli. Le release future potrebbero cambiare gli effetti "
"dell'ottimizzazione."

#: ../Doc/tutorial/modules.rst:244
msgid ""
"A program doesn't run any faster when it is read from a ``.pyc`` file than "
"when it is read from a ``.py`` file; the only thing that's faster about ``."
"pyc`` files is the speed with which they are loaded."
msgstr ""
"Un programma non viene eseguito più velocemente da un file ``.pyc`` rispetto "
"ad un file ``.py``; l'unica cosa più veloce sui file ``.pyc`` è il loro "
"caricamento."

#: ../Doc/tutorial/modules.rst:248
msgid ""
"The module :mod:`compileall` can create .pyc files for all modules in a "
"directory."
msgstr ""
"Il modulo :mod:`compileall` può creare file .pyc per tutti i moduli nella "
"cartella."

#: ../Doc/tutorial/modules.rst:251
msgid ""
"There is more detail on this process, including a flow chart of the "
"decisions, in :pep:`3147`."
msgstr ""
"Esistono più dettagli su questo processo, compreso un diagramma di flusso "
"delle decisioni, in :pep:`3147`."

#: ../Doc/tutorial/modules.rst:258
msgid "Standard Modules"
msgstr "Moduli standard"

#: ../Doc/tutorial/modules.rst:262
msgid ""
"Python comes with a library of standard modules, described in a separate "
"document, the Python Library Reference (\"Library Reference\" hereafter).  "
"Some modules are built into the interpreter; these provide access to "
"operations that are not part of the core of the language but are "
"nevertheless built in, either for efficiency or to provide access to "
"operating system primitives such as system calls.  The set of such modules "
"is a configuration option which also depends on the underlying platform.  "
"For example, the :mod:`winreg` module is only provided on Windows systems. "
"One particular module deserves some attention: :mod:`sys`, which is built "
"into every Python interpreter.  The variables ``sys.ps1`` and ``sys.ps2`` "
"define the strings used as primary and secondary prompts::"
msgstr ""
"Python è fornito di un libreria di moduli standard, descritta in un "
"documento separato, la Python Library Reference (da qui in poi \"Library "
"Reference\"). Alcuni moduli sono integrati nell'interprete; questi "
"permettono l'accesso alle operazioni che non sono parte del linguaggio ma "
"sono comunque built-in, sia per efficienza che per permettere l'accesso alle "
"primitive del sistema operativo, come le chiamate di sistema. L'insieme di "
"questi moduli è un'opzione di configurazione che dipende anche dalla "
"piattaforma sottostante. Ad esempio, il modulo :mod:`winreg` è disponibile "
"solo sui sistemi WIndows. Un particolare modulo merita particolare "
"attenzione: :mod:`sys`, integrato in ogni interprete Python. Le variabili "
"``sys.ps1`` e ``sys.ps2`` definiscono le stringhe usate come prompt primario "
"e secondario::"

#: ../Doc/tutorial/modules.rst:285
msgid ""
"These two variables are only defined if the interpreter is in interactive "
"mode."
msgstr ""
"Queste due variabili sono definite solo se l'interprete è in modalità "
"interattiva."

#: ../Doc/tutorial/modules.rst:287
msgid ""
"The variable ``sys.path`` is a list of strings that determines the "
"interpreter's search path for modules. It is initialized to a default path "
"taken from the environment variable :envvar:`PYTHONPATH`, or from a built-in "
"default if :envvar:`PYTHONPATH` is not set.  You can modify it using "
"standard list operations::"
msgstr ""
"La variabile ``sys.path`` è una lista di stringhe che determina il percorso "
"di ricerca dell'interprete per i moduli. Questo viene inizializzato al "
"percorso di default preso dalla variabile d'ambiente :envvar:`PYTHONPATH`, o "
"da un default built-in se :envvar:`PYTHONPATH` non è impostata. Pui "
"modificarla usando le operazioni standard sulle liste::"

#: ../Doc/tutorial/modules.rst:300
msgid "The :func:`dir` Function"
msgstr "La Funzione :func:`dir`"

#: ../Doc/tutorial/modules.rst:302
msgid ""
"The built-in function :func:`dir` is used to find out which names a module "
"defines.  It returns a sorted list of strings::"
msgstr ""
"La funzione built-in :func:`dir` è usata per sapere quali nomi sono definiti "
"da un modulo. Restituisce una lista ordinata di stringhe::"

#: ../Doc/tutorial/modules.rst:327
msgid ""
"Without arguments, :func:`dir` lists the names you have defined currently::"
msgstr ""
"Senza argomenti, :func:`dir` elenca i nomi che hai definito al momento::"

#: ../Doc/tutorial/modules.rst:335
msgid ""
"Note that it lists all types of names: variables, modules, functions, etc."
msgstr ""
"Da notare che elenca tutti i tipi di nome: variabili, moduli, funzioni, "
"ecc..."

#: ../Doc/tutorial/modules.rst:339
msgid ""
":func:`dir` does not list the names of built-in functions and variables.  If "
"you want a list of those, they are defined in the standard module :mod:"
"`builtins`::"
msgstr ""
":func:`dir` non elenca i nomi delle funzioni e variabili built-in. Se vuoi "
"una lista di essi, sono definiti nel modulo standard :mod:`builtins`::"

#: ../Doc/tutorial/modules.rst:378
msgid "Packages"
msgstr "Package"

#: ../Doc/tutorial/modules.rst:380
msgid ""
"Packages are a way of structuring Python's module namespace by using "
"\"dotted module names\".  For example, the module name :mod:`A.B` designates "
"a submodule named ``B`` in a package named ``A``.  Just like the use of "
"modules saves the authors of different modules from having to worry about "
"each other's global variable names, the use of dotted module names saves the "
"authors of multi-module packages like NumPy or Pillow from having to worry "
"about each other's module names."
msgstr ""

#: ../Doc/tutorial/modules.rst:388
msgid ""
"Suppose you want to design a collection of modules (a \"package\") for the "
"uniform handling of sound files and sound data.  There are many different "
"sound file formats (usually recognized by their extension, for example: :"
"file:`.wav`, :file:`.aiff`, :file:`.au`), so you may need to create and "
"maintain a growing collection of modules for the conversion between the "
"various file formats. There are also many different operations you might "
"want to perform on sound data (such as mixing, adding echo, applying an "
"equalizer function, creating an artificial stereo effect), so in addition "
"you will be writing a never-ending stream of modules to perform these "
"operations.  Here's a possible structure for your package (expressed in "
"terms of a hierarchical filesystem):"
msgstr ""

#: ../Doc/tutorial/modules.rst:425
msgid ""
"When importing the package, Python searches through the directories on ``sys."
"path`` looking for the package subdirectory."
msgstr ""

#: ../Doc/tutorial/modules.rst:428
msgid ""
"The :file:`__init__.py` files are required to make Python treat directories "
"containing the file as packages.  This prevents directories with a common "
"name, such as ``string``, unintentionally hiding valid modules that occur "
"later on the module search path. In the simplest case, :file:`__init__.py` "
"can just be an empty file, but it can also execute initialization code for "
"the package or set the ``__all__`` variable, described later."
msgstr ""

#: ../Doc/tutorial/modules.rst:435
msgid ""
"Users of the package can import individual modules from the package, for "
"example::"
msgstr ""

#: ../Doc/tutorial/modules.rst:440
msgid ""
"This loads the submodule :mod:`sound.effects.echo`.  It must be referenced "
"with its full name. ::"
msgstr ""

#: ../Doc/tutorial/modules.rst:445
msgid "An alternative way of importing the submodule is::"
msgstr ""

#: ../Doc/tutorial/modules.rst:449
msgid ""
"This also loads the submodule :mod:`echo`, and makes it available without "
"its package prefix, so it can be used as follows::"
msgstr ""

#: ../Doc/tutorial/modules.rst:454
msgid ""
"Yet another variation is to import the desired function or variable "
"directly::"
msgstr ""

#: ../Doc/tutorial/modules.rst:458
msgid ""
"Again, this loads the submodule :mod:`echo`, but this makes its function :"
"func:`echofilter` directly available::"
msgstr ""

#: ../Doc/tutorial/modules.rst:463
msgid ""
"Note that when using ``from package import item``, the item can be either a "
"submodule (or subpackage) of the package, or some  other name defined in the "
"package, like a function, class or variable.  The ``import`` statement first "
"tests whether the item is defined in the package; if not, it assumes it is a "
"module and attempts to load it.  If it fails to find it, an :exc:"
"`ImportError` exception is raised."
msgstr ""

#: ../Doc/tutorial/modules.rst:470
msgid ""
"Contrarily, when using syntax like ``import item.subitem.subsubitem``, each "
"item except for the last must be a package; the last item can be a module or "
"a package but can't be a class or function or variable defined in the "
"previous item."
msgstr ""

#: ../Doc/tutorial/modules.rst:479
msgid "Importing \\* From a Package"
msgstr ""

#: ../Doc/tutorial/modules.rst:483
msgid ""
"Now what happens when the user writes ``from sound.effects import *``?  "
"Ideally, one would hope that this somehow goes out to the filesystem, finds "
"which submodules are present in the package, and imports them all.  This "
"could take a long time and importing sub-modules might have unwanted side-"
"effects that should only happen when the sub-module is explicitly imported."
msgstr ""

#: ../Doc/tutorial/modules.rst:489
msgid ""
"The only solution is for the package author to provide an explicit index of "
"the package.  The :keyword:`import` statement uses the following convention: "
"if a package's :file:`__init__.py` code defines a list named ``__all__``, it "
"is taken to be the list of module names that should be imported when ``from "
"package import *`` is encountered.  It is up to the package author to keep "
"this list up-to-date when a new version of the package is released.  Package "
"authors may also decide not to support it, if they don't see a use for "
"importing \\* from their package.  For example, the file :file:`sound/"
"effects/__init__.py` could contain the following code::"
msgstr ""

#: ../Doc/tutorial/modules.rst:501
msgid ""
"This would mean that ``from sound.effects import *`` would import the three "
"named submodules of the :mod:`sound` package."
msgstr ""

#: ../Doc/tutorial/modules.rst:504
msgid ""
"If ``__all__`` is not defined, the statement ``from sound.effects import *`` "
"does *not* import all submodules from the package :mod:`sound.effects` into "
"the current namespace; it only ensures that the package :mod:`sound.effects` "
"has been imported (possibly running any initialization code in :file:"
"`__init__.py`) and then imports whatever names are defined in the package.  "
"This includes any names defined (and submodules explicitly loaded) by :file:"
"`__init__.py`.  It also includes any submodules of the package that were "
"explicitly loaded by previous :keyword:`import` statements.  Consider this "
"code::"
msgstr ""

#: ../Doc/tutorial/modules.rst:517
msgid ""
"In this example, the :mod:`echo` and :mod:`surround` modules are imported in "
"the current namespace because they are defined in the :mod:`sound.effects` "
"package when the ``from...import`` statement is executed.  (This also works "
"when ``__all__`` is defined.)"
msgstr ""

#: ../Doc/tutorial/modules.rst:522
msgid ""
"Although certain modules are designed to export only names that follow "
"certain patterns when you use ``import *``, it is still considered bad "
"practice in production code."
msgstr ""

#: ../Doc/tutorial/modules.rst:526
msgid ""
"Remember, there is nothing wrong with using ``from Package import "
"specific_submodule``!  In fact, this is the recommended notation unless the "
"importing module needs to use submodules with the same name from different "
"packages."
msgstr ""

#: ../Doc/tutorial/modules.rst:533
msgid "Intra-package References"
msgstr ""

#: ../Doc/tutorial/modules.rst:535
msgid ""
"When packages are structured into subpackages (as with the :mod:`sound` "
"package in the example), you can use absolute imports to refer to submodules "
"of siblings packages.  For example, if the module :mod:`sound.filters."
"vocoder` needs to use the :mod:`echo` module in the :mod:`sound.effects` "
"package, it can use ``from sound.effects import echo``."
msgstr ""

#: ../Doc/tutorial/modules.rst:541
msgid ""
"You can also write relative imports, with the ``from module import name`` "
"form of import statement.  These imports use leading dots to indicate the "
"current and parent packages involved in the relative import.  From the :mod:"
"`surround` module for example, you might use::"
msgstr ""

#: ../Doc/tutorial/modules.rst:550
msgid ""
"Note that relative imports are based on the name of the current module.  "
"Since the name of the main module is always ``\"__main__\"``, modules "
"intended for use as the main module of a Python application must always use "
"absolute imports."
msgstr ""

#: ../Doc/tutorial/modules.rst:556
msgid "Packages in Multiple Directories"
msgstr ""

#: ../Doc/tutorial/modules.rst:558
msgid ""
"Packages support one more special attribute, :attr:`__path__`.  This is "
"initialized to be a list containing the name of the directory holding the "
"package's :file:`__init__.py` before the code in that file is executed.  "
"This variable can be modified; doing so affects future searches for modules "
"and subpackages contained in the package."
msgstr ""

#: ../Doc/tutorial/modules.rst:564
msgid ""
"While this feature is not often needed, it can be used to extend the set of "
"modules found in a package."
msgstr ""

#: ../Doc/tutorial/modules.rst:569
msgid "Footnotes"
msgstr ""

#: ../Doc/tutorial/modules.rst:570
msgid ""
"In fact function definitions are also 'statements' that are 'executed'; the "
"execution of a module-level function definition enters the function name in "
"the module's global symbol table."
msgstr ""
